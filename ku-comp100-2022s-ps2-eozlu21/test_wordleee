
from asyncio import FastChildWatcher
from words import guess_word_list, valid_word_list
import random

list_of_results = [["_", "_", "_", "_", "_"], ["_", "_", "_", "_", "_"], ["_", "_", "_", "_", "_"],
                   ["_", "_", "_", "_", "_"], ["_", "_", "_", "_", "_"]]

attempt_number = 1
attempted_word = ""


def valid_word_func():
    global attempted_word

    def is_valid(word):
        return len(word) == 5

    attempted_word = input("Enter a word: ")
    if not is_valid(attempted_word):
        print("Word length should be 5.")
        return False
    elif is_valid(attempted_word):
        if attempted_word not in valid_word_list:
            print("Word " + attempted_word + " is not found in the list.")
            return False
        return attempted_word


def resulter(valid_word, chosen_word, word_found=False):

    chosen_word_list = list(chosen_word)

    if valid_word == chosen_word:
        word_found = True
    
    def letter_color_labeler():
        nonlocal letter
        if is_green:
            letter += " is green"
        elif is_yellow:
            letter += " is yellow"

    global list_of_results
    letter_index = 0
    if word_found is not True:
        for letter in valid_word:
            is_yellow = False
            is_green = False
            if valid_word[letter_index] == chosen_word_list[letter_index]:
                is_green = True
                letter_color_labeler()
                chosen_word_list[letter_index] = "*" #so it doesn't look for it in the chosen word once again
                list_of_results[attempt_number - 1][letter_index] = letter
            letter_index += 1
        letter_index = 0
        for letter in valid_word:
            if letter in chosen_word_list:
                is_yellow = True
                letter_color_labeler()
            if not "is green" in list_of_results[attempt_number - 1][letter_index]:
                list_of_results[attempt_number - 1][letter_index] = letter
            for i in range(len(chosen_word_list)):
                if letter[0] == chosen_word_list[i]:
                    chosen_word_list[i] = "-" 
                    break
            letter_index += 1
                
    else:
        for letter in chosen_word:
            list_of_results[attempt_number - 1][letter_index] = str(letter).upper()
            letter_index += 1
    for inner_list in list_of_results:
        printed_word = ""
        for index in range(len(inner_list)):
            if "is yellow" in inner_list[index]:
                printed_word += f"\033[33m{inner_list[index][0]}\033[0m"
            elif "is green" in inner_list[index]:
                printed_word += f"\033[92m{inner_list[index][0]}\033[0m"
            else:
                printed_word += inner_list[index][0]
            if index == len(inner_list) - 1:
                break
            printed_word += " "
        print(printed_word)
    return word_found


def game_initialize():
    print("=== W O R D L E ===")
    print("Cached " + str(len(guess_word_list)) + " words.")
    game_mode = int(input("Select a mode, Enter (1) for Debug Mode, (2) for Test Mode: "))
    if game_mode == 1:
        index_of_chosen_word = int(input("Enter an index in between 0-548: "))
    elif game_mode == 2:
        index_of_chosen_word = random.randint(0, 548)
    chosen_word = guess_word_list[index_of_chosen_word]
    print("The selected word is: " + chosen_word)
    return chosen_word


chosen_word = game_initialize()
while valid_word_func() is False:
    continue
while (not resulter(attempted_word, chosen_word)) and attempt_number < 5:
    while valid_word_func() is False:
        continue
    attempt_number += 1
